from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import re

from app.keyboards import (
    get_main_keyboard,
    get_finish_keyboard,
    get_delete_keyboard
)
from app.parser import get_steam_game_info

router = Router()
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_games = {}

class UrlStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_delete = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

def is_valid_steam_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º Steam URL"""
    pattern = r'^https?://store\.steampowered\.com/app/\d+/[^/]*/?$'
    return re.match(pattern, url.strip()) is not None

def normalize_url(url: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç URL –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É"""
    return url.lower().strip().rstrip('/')

@router.message(CommandStart())
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∏–≥—Ä—ã –≤ Steam",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == '–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–≥—Ä Steam')
async def handle_show_games(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    games = user_games.get(user_id, [])
    
    if not games:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç")
        return
    
    for game in games:
        result = get_steam_game_info(game['url'])
        if "error" in result:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result['error']}")
            continue
            
        response = f"üéÆ <b>{result['name']}</b>\n"
        if result["is_free"]:
            response += "üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        else:
            price = ''.join(c for c in result["price"] if c.isdigit() or c in ',.')
            if "discount" in result:
                original = ''.join(c for c in result["original_price"] if c.isdigit() or c in ',.')
                response += f"üî• –°–∫–∏–¥–∫–∞ {result['discount']}\n"
                response += f"üíµ {price} —Ä—É–±. (–±—ã–ª–æ {original})"
            else:
                response += f"üíµ {price} —Ä—É–±."
        
        await message.answer(response, parse_mode='HTML')

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å url')
async def handle_add_url(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL"""
    await state.set_state(UrlStates.waiting_for_url)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ URL –∏–≥—Ä—ã –∏–∑ Steam (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://store.steampowered.com/app/123456/Game_Name/)\n\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ URL –ø–æ–¥—Ä—è–¥.\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        reply_markup=get_finish_keyboard()
    )

@router.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å")
@router.message(Command("cancel"))
async def handle_finish_adding_anywhere(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
    if current_state is None:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    try:
        await state.clear()
        
        try:
            await message.delete()
        except:
            pass
        
        user_id = message.from_user.id
        count = len(user_games.get(user_id, []))
        
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –∏–≥—Ä: {count}",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–æ–≤—ã–π
@router.message(UrlStates.waiting_for_url, F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å")
@router.message(UrlStates.waiting_for_url, Command("cancel"))
async def handle_finish_adding(message: Message, state: FSMContext):
    await handle_finish_adding_anywhere(message, state)

@router.message(UrlStates.waiting_for_url)
async def handle_save_url(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –∏–≥—Ä—ã"""
    user_id = message.from_user.id
    url = message.text.strip()
    
    if not is_valid_steam_url(url):
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Steam URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    
    norm_url = normalize_url(url)
    current_games = user_games.get(user_id, [])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if any(norm_url == normalize_url(game['url']) for game in current_games):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    game_info = get_steam_game_info(url)
    if "error" in game_info:
        await message.answer(f"–û—à–∏–±–∫–∞: {game_info['error']}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
    if user_id not in user_games:
        user_games[user_id] = []
    
    user_games[user_id].append({
        'url': url,
        'name': game_info['name']
    })
    
    await message.answer(
        f"‚úÖ <b>{game_info['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: {len(user_games[user_id])}",
        parse_mode='HTML'
    )

@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å url')
async def handle_delete_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä"""
    user_id = message.from_user.id
    games = user_games.get(user_id, [])
    
    if not games:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç", reply_markup=get_main_keyboard())
        return
    
    await state.set_state(UrlStates.waiting_for_delete)
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_delete_keyboard(games)
        )
    except Exception as e:
        logger.error(f"Error showing delete keyboard: {e}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(UrlStates.waiting_for_delete, F.data.startswith("delete_"))
async def handle_delete_game(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    user_id = callback.from_user.id
    try:
        game_idx = int(callback.data.split("_")[1])
        
        if user_id not in user_games or game_idx >= len(user_games[user_id]):
            await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        deleted_game = user_games[user_id].pop(game_idx)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()
        await callback.answer()
        
        # –ï—Å–ª–∏ –∏–≥—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if user_games.get(user_id):
            await callback.message.answer(
                reply_markup=get_delete_keyboard(user_games[user_id])
            )
        else:
            await state.clear()
            await callback.message.answer(
                "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error deleting game: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
